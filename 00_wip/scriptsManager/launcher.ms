/*
-- maj:
	-- remove favorite
	x-- catch obsolete path, cleaner at opening 
	-- update on closing
	-- add selection set:
		-- default/all is "armadasScriptsArray=#"
		-- create set, delete set, add script to selected set remove script from selected set
-- debug:
	-- eviter des erreur au load sur les filename contenant des \r \n \t
		
-- rebuild:
	/- creer une methode pour loader les favoris du core depuis un fichier externes(ini)
	-- utiliser les methodes externes pour enregistrer les préferences
	
*/


-- with printAllElements on propArVal as string

fn sortbyname v1 v2 =
(
	-- qsort <array> sortbyname
-- 	vars
	local d
	
	if ( (toLower v1.name) < (toLower v2.name)) then
		d=-1
	else
		d=1
	
--compare les numeros entre eux et les classe	
	case of
	(
		(d < 0.): -1
		(d > 0.): 1
		default: 0
	)
)

try(destroyDialog mxsLaunchRLT)catch()

struct favFileClass
(
	path,
	name = getFilenameFile path,
	
	fn launch =
	(
		if doesfileexist path then
		(
			filein path
		)
		else
		(
			print "no script"
		)
	)
)

rollout mxsLaunchRLT "maxscript launcher"
(
-- 	local var = checkIniFileFn()
	local posBak
	
	local btnLine1 = 450
	
-- 	local maxIni = getMAXIniFile()
-- 	local armadasScriptsIni = (getFilenamePath maxIni) + "armadasScriptsIni.ini"
	local armadasScriptsIni = (GetDir #maxData) + "armadasScriptsIni.ini"
	
-- 	local tmpRoot = getINISetting armadasScriptsIni "armadasScripts" "armadasScriptsRoot"
-- 	local root = substituteString tmpRoot "\\" "/"
	local root = getRoot()
	
-- 	local favAr = #()
	
-- 	local root = modeArchiScriptRoot
	local scriptArray = #()
	
	local favScriptAr = #()
	local fileClassArray = #()
	
	local fileClassCoreArray = #()
	local displayAr = #()
	
	local rltParams = #("pos", "favScriptAr")
		
	-- functions
	fn loadFavorites =
	(
		local favScriptArray = #()
		local favAr = #()
		favScriptAr =#()
		
		-- load favorite list from ini file
		if (hasINISetting armadasScriptsIni mxsLaunchRLT.name  "favScriptAr") == true then
		(
			format "ini key found\n"
			favArStr = getINISetting armadasScriptsIni  mxsLaunchRLT.name "favScriptAr"
			favArTmp = execute favArStr
-- 			print favArTmp
			-- test if file exist
			for onePath in favArTmp do
			(
				if doesFileExist onePath == true then
				(
					format "filename found: %\n" onePath
					appendifunique favScriptAr onePath
				)
				else
				(
					format "filename not found: %\n" onePath
				)
			)
			
			-- correct file string
-- 			print favAr.count
			format "favorites scripts loaded: %\n" favScriptAr
		)
		else
		(
			favScriptAr = #()
			format "favorites array init\n"
		)
-- 		
-- 		print favAr.count
		
		-- collect good scripts as favFileClass instance
		if favScriptAr.count >= 1 then
		(
			favScriptArray = for script in favScriptAr collect (favFileClass script)
		)
		else 
		(
			format "no favorites to load\n"
		)
		
		qsort favScriptArray sortbyname
		favScriptArray
		
	)
	
	fn loadfavorites2 =
	(
		
	)
	
	/*
	fn writePosition cat =
	(
		posBak = GetDialogPos mxsLaunchRLT
		res = setINISetting armadasScriptsIni cat "pos" (posBak as string)
		res
		format  "ScriptLauncher position saved: %\n" res
	)
	*/
	/*
	fn writeFavorite =
	(
-- 		print "bye, favorites writting soon!"
-- 		local scriptsPathesAr  = for script in fileClassArray collect script.path
-- 		favScriptAr  = for script in fileClassArray collect script.path
-- 		print scriptsPathesAr
		-- for each fav instance collect path
		-- write pathes in array
-- 		local favData = with printAllElements on scriptsPathesAr as string
		local favData = with printAllElements on favScriptAr as string
			
-- 		res1 = setINISetting armadasScriptsIni "armadasScriptsFavorite" "armadasScriptsArray" favData
		res1 = setINISetting armadasScriptsIni "armadasScriptsFavorite" "favScriptAr" favData
-- 		resPos = writePosition "armadasScriptsFavorite"
		format "favorites scripts saved: % List: %\n" res1 favData
-- 		format  "ScriptLauncher favorites saved: %\n" res1
	)
*/
	/*
	fn loadPosition cat =
	(
		posBak = [800,250]
		if (hasINISetting armadasScriptsIni cat "pos") then
		(
			posBakStr = getINISetting armadasScriptsIni  cat "pos"
			posBak = execute posBakStr
		)
		posBak
	)
*/
	
	fn loadCore2 = 
	(
		local coreScriptArrayStr = #()
		local coreScriptArray = #()
		
		-- recuperer le fichier ini
		iniCoreFileName = root + "/scriptsManager/scriptListCore.ini"
		format "core ini file: %\n" iniCoreFileName
		
		-- collect clean list
		if doesfileexist iniCoreFileName then
		(
			coreArStr = getINISetting iniCoreFileName  "coreScriptList" "scriptArray"
			coreArStrTmp = execute coreArStr
			format "core script list: %\n" coreArStrTmp
			
			-- test if file exist
			for onePath in coreArStrTmp do
			(
				if doesFileExist (root + onePath) then
				(
					appendifunique coreScriptArrayStr (root + onePath)
				)else(format "obsolete path: %\n" (root + onePath))
			)
		)
		else 	(format "ini file doesn't exist: %\n" iniCoreFileName)
		format "core scripts loaded: % \n" coreScriptArrayStr
		
		-- collecte des structures
		coreScriptArray = for script in coreScriptArrayStr collect (favFileClass script)
		
-- 		format "script list: %\n" coreScriptArray
		-- recuperer la liste de script du fichier ini
		coreScriptArray
	)
	
	fn writeFavToCore =
	(
		iniCoreFileName = root + "/scriptsManager/scriptListCore.ini"
		
		if doesfileexist iniCoreFileName then
		(
			format "fileClassArray: %\n" fileClassArray
			local scriptsPathesAr = #()
			for script in fileClassArray do
			(
				pathEnd = substitutestring script.path root ""
				append scriptsPathesAr pathEnd
			)			
			
			local coreData = with printAllElements on scriptsPathesAr as string
			format "core data: %\n" coreData
			coreArStr = setINISetting iniCoreFileName  "coreScriptList" "scriptArray" coreData
		)
		else 	(format "ini file doesn't exist: %\n" iniCoreFileName)
	)
	


	
-- 	UI
	group "favorites:"
	(
		button loadFavoritesBT "load" across: 2
		button deleteBT "remove"
	)
	
	group "scripts actions:"
	(
		button launchBT "launch"  across: 2
		button editBT "edit"  
	)

-- 	button sortListBT  "sort by name"
		
	listbox scriptArrayLB "scripts list:"  height: 30

-- 	button openFolder "open scripts folder" 
	
		
	group "core:"
	(
		button loadHardCoresBT "load core" across: 3
		button favToCoreBT "fav to core" 
		button coreToFavBT "core to fav"
	)

	
--  ui functions relative
	fn refreshList =
	(
		scriptArrayLB.items = for script in displayAr collect script.name
	)
	
	fn writeCoreToFav =
	(
		fileClassArray = loadCore2()
		favScriptAr  = for script in fileClassArray collect script.path
-- 		writeFavorite()
		writeRolloutParams mxsLaunchRLT rltParams
		
		fileClassArray = loadFavorites()
		displayAr = fileClassArray
		refreshList()
	)
	
-- 	actions

	on mxsLaunchRLT open do
	(
		loadRolloutParams mxsLaunchRLT rltParams
		format "favScriptAr: %\n" favScriptAr 
		
		fileClassArray = loadFavorites()
		displayAr = fileClassArray
		refreshList()
		

-- 		posBak = loadPosition "armadasScriptsFavorite"
-- 		SetDialogPos mxsLaunchRLT posBak
	)
		
	on mxsLaunchRLT close do
	(
		writeRolloutParams mxsLaunchRLT rltParams
-- 		writeFavorite()
	)
	
	on loadFavoritesBT pressed do
	(
		fileClassArray = loadFavorites()
		displayAr = fileClassArray
		refreshList()
	)
	
	on favToCoreBT pressed do writeFavToCore ()

	on coreToFavBT pressed do writeCoreToFav ()
	
	on loadHardCoresBT pressed do
	(
-- 		loadCore2 ()
		fileClassCoreArray = loadCore2()
-- 		format "fileClassArray:%\n" fileClassCoreArray
-- 		fileClassArray = loadCore()
		displayAr = fileClassCoreArray
-- 		format "displayAr:%\n" displayAr
		refreshList()
	)
		
	on launchBT pressed do filein (fileClassArray[scriptArrayLB.selection].path)
	
	on scriptArrayLB doubleClicked  arg do
	(
		displayAr[arg].launch()
	)
	
	on editBT pressed do edit (fileClassArray[scriptArrayLB.selection].path)
		
	on deleteBT pressed do
	(
		id = scriptArrayLB.selection
		-- find selection in original array
		res = finditem fileClassArray displayAr[id] 
-- 		format "remove: %\n" displayAr[id] 
		-- delete selection
-- 		format "fileClassArrayCount: % \n"  fileClassArray.count
		deleteItem fileClassArray res
-- 		format "fileClassArrayCount: % \n"  fileClassArray.count
-- 		format "count1: % count2:%\n" test.count fileClassArray.count
		favScriptAr  = for script in fileClassArray collect script.path
		-- write array list in ini
		writeRolloutParams mxsLaunchRLT rltParams
-- 		writeFavorite()
		
		-- reload list
		
		fileClassArray = loadFavorites()
		displayAr = fileClassArray
		refreshList()
	)
)
createdialog mxsLaunchRLT width:300 style: #(#style_titlebar, #style_border, #style_sysmenu,#style_minimizebox, #style_maximizebox )



